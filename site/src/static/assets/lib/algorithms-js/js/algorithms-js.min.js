(function(){var e=this,t=e.algsJS,n=e.algsJS={};n.VERSION="0.0.0",n.noConflict=function(){return e.algsJS=t,this},n.Extendable={extend:function(e,t){var n=this,r;e&&e.hasOwnProperty("constructor")?r=e.constructor:r=function(){return n.apply(this,arguments)},_.extend(r,n,t);var i=function(){this.constructor=r};return i.prototype=n.prototype,r.prototype=new i,e&&_.extend(r.prototype,e),r.__super__=n.prototype,r}},n.Events={trigger:function(e){if(!this._events)return this;var t=this._events[e];if(t)for(var n=0;n<t.length;n++)t[n].apply(this,arguments);return this},on:function(e,t){if(typeof t=="function"){this._events=this._events||{};var n=this._events[e]||(this._events[e]=[]);n.push(t)}return this}}}).call(this),function(){var e=algsJS.uf={},t=e.QuickFind=function(e){this.idx=[];for(var t=0;t<e;t++)this.idx[t]=t};t.prototype={find:function(e){return this.idx[e]},connected:function(e,t){return this.idx[e]===this.idx[t]},union:function(e,t){if(!this.connected(e,t)){var n,r,i=this.idx[e];r=this.idx.length;for(n=0;n<r;n++)i===this.idx[n]&&(this.idx[n]=this.idx[t])}}};var n=e.QuickUnion=function(e){this.idx=[];for(var t=0;t<e;t++)this.idx[t]=t};n.prototype={find:function(e){var t=e;do e=t,t=this.idx[e];while(t!==e);return t},connected:function(e,t){return this.find(e)===this.find(t)},union:function(e,t){var n=this.find(e),r=this.find(t);n!==r&&(this.idx[n]=r)}};var r=e.WeightedQuickUnion=function(e){this.idx=[],this.sz=[];for(var t=0;t<e;t++)this.idx[t]=t,this.sz[t]=1};r.prototype={find:function(e){var t=e;do e=t,t=this.idx[e];while(t!==e);return t},connected:function(e,t){return this.find(e)===this.find(t)},union:function(e,t){var n=this.find(e),r=this.find(t);n!==r&&(this.sz[n]<this.sz[r]?(this.idx[n]=r,this.sz[r]+=this.sz[n]):(this.idx[r]=n,this.sz[n]+=this.sz[r]))}}}(),function(){var e=algsJS.sort={},t=algsJS.Events,n=function(e,t,n){var r=e[n];e[n]=e[t],e[t]=r},r=function(e,t){return e<t?-1:e>t?1:0},i=e.Selection=function(){};i.prototype={sort:function(e,t){t=t||r;var i=e.length,s;for(s=0;s<i;s++){s===0?this.trigger("trace",{items:e,state:{i:s},message:"Set i = 0"}):this.trigger("trace",{items:e,state:{i:s},message:"Increment i"});var o=s;this.trigger("trace",{items:e,state:{min:o},message:"Set min = i"});var u;for(u=s+1;u<i;u++)u===s+1?this.trigger("trace",{items:e,state:{j:u},message:"Set j = i + 1"}):this.trigger("trace",{items:e,state:{j:u},message:"Increment j"}),this.trigger("trace",{items:e,message:"Compare items[j] to items[min]"}),t(e[u],e[o])<0?(o=u,this.trigger("trace",{items:e,state:{min:o},message:"If items[j] is less than items[min], then set min = j as a minmun entry"})):this.trigger("trace",{items:e,message:"If items[j] is not less than items[min], then do nothing"});this.trigger("trace",{items:e,message:"Scanned items[i..N]"}),s!==o&&(this.trigger("trace",{items:e,message:"The new minimum entry items[min] was found"}),n(e,o,s),this.trigger("trace",{items:e,message:"Exchange items[i] with items[min]"}))}this.trigger("trace",{items:e,message:"Sorted items[]"})}},_.extend(i.prototype,t);var s=e.Insertion=function(){};s.prototype={sort:function(e,t){t=t||r;var i=e.length,s;for(s=1;s<i;s++){s===1?this.trigger("trace",{items:e,state:{i:s},message:"Set i = 1"}):this.trigger("trace",{items:e,state:{i:s},message:"Increment i"});var o;for(o=s;o>0;o--){o===s?this.trigger("trace",{items:e,state:{j:o},message:"Set j = i"}):this.trigger("trace",{items:e,state:{j:o},message:"Decrement j"}),this.trigger("trace",{items:e,message:"Compare items[j] to items[j - 1]"});if(t(e[o],e[o-1])>=0){this.trigger("trace",{items:e,message:"If items[j] is not less than items[j - 1], then stop scanning items[0..j]"});break}this.trigger("trace",{items:e,message:"items[j] is less than items[j - 1]"}),n(e,o,o-1),this.trigger("trace",{items:e,message:"Exchange items[j - 1] with items[j]"})}this.trigger("trace",{items:e,message:"Scanned items[0..j]"})}this.trigger("trace",{items:e,message:"Sorted items[]"})}},_.extend(s.prototype,t);var o=e.Shell=function(){};o.prototype={sort:function(e,t){t=t||r;var i=e.length,s=1,o=Math.floor(i/3);while(s<o)s=3*s+1;this.trigger("trace",{items:e,state:{h:s},message:"Using Knuth's 3x+1 increments, set the initial step h = "+s+""});while(s>=1){this.trigger("trace",{items:e,message:"Begin "+s+"-sort"});for(var u=s;u<i;u++){u===s?this.trigger("trace",{items:e,state:{i:u},message:"Set i = h"}):this.trigger("trace",{items:e,state:{i:u},message:"Increment i"});for(var a=u;a>=s;a-=s){a===u?this.trigger("trace",{items:e,state:{j:a},message:"Set j = i"}):this.trigger("trace",{items:e,state:{j:a},message:"Decrement j by h"}),this.trigger("trace",{items:e,message:"Compare items[j] to items[j - h]"});if(t(e[a],e[a-s])>=0){this.trigger("trace",{items:e,message:"If items[j] is not less than items[j - h], then stop scanning items[0..j by h]"});break}this.trigger("trace",{items:e,message:"items[j] is less than items[j - h]"}),n(e,a,a-s),this.trigger("trace",{items:e,message:"Exchanged items[j - h] with items[j]"})}}this.trigger("trace",{items:e,state:{i:undefined,j:undefined},message:"Scanned items[0..N by "+s+"]"});if(!(s>1))break;s=Math.floor(s/3),this.trigger("trace",{items:e,state:{h:s},message:"Update h = h / 3"})}this.trigger("trace",{items:e,message:"Sorted items[]"})}},_.extend(o.prototype,t);var u={merge:function(e,t,n,r,i){var s=e.slice(n,i+1),o=0,u=r+1-n;this.trigger("trace",{items:e,aux:s,state:{loP:o,hiP:u},message:"Copy items[lo..hi] to aux[]"});for(var a=n;a<=i;a++){a===n?this.trigger("trace",{items:e,aux:s,state:{i:a},message:"Set i = lo"}):this.trigger("trace",{items:e,aux:s,state:{i:a},message:"Increment i"});if(o+n>r){this.trigger("trace",{items:e,aux:s,message:"Every lo-side aux[] entry has been copied. Stop merging"});break}u+n>i?(e[a]=s[o],this.trigger("trace",{items:e,aux:s,message:"If aux[hiP] is empty, then copy aux[loP] to items[i]"}),o++,this.trigger("trace",{items:e,aux:s,state:{loP:o},message:"Increment loP"})):t(s[u],s[o])<0?(e[a]=s[u],this.trigger("trace",{items:e,aux:s,message:"If aux[hiP] is less than aux[loP], then copy aux[hiP] to items[i]"}),u++,this.trigger("trace",{items:e,aux:s,state:{hiP:u},message:"Increment hiP"})):(e[a]=s[o],this.trigger("trace",{items:e,aux:s,message:"If aux[hiP] is not less than aux[loP], then copy aux[loP] to items[i]"}),o++,this.trigger("trace",{items:e,aux:s,state:{loP:o},message:"Increment loP"}))}this.trigger("trace",{items:e,aux:undefined,state:{loP:undefined,hiP:undefined,i:undefined},message:"Merged aux[] into items[]"})}},a=e.TopDownMerge=function(){};a.prototype={sort:function(e,t){t=t||r;var n=this,i=function(r,s){if(r>=s)return;n.trigger("trace",{items:e,state:{lo:r,mid:undefined,hi:s},message:"Divide items[lo..hi]"});var o=r+Math.floor((s-r)/2);n.trigger("trace",{items:e,state:{mid:o},message:"Set mid = "+o}),i(r,o),i(o+1,s),n.trigger("trace",{items:e,state:{lo:r,mid:o,hi:s},message:"Merge items[lo..mid..hi]"}),n.merge(e,t,r,o,s)};i(0,e.length-1),n.trigger("trace",{items:e,message:"Sorted items[]"})}},_.extend(a.prototype,t,u);var f=e.BottomUpMerge=function(){};f.prototype={sort:function(e,t){t=t||r;var n=e.length;for(var i=1;i<n;i+=i)for(var s=0;s<n-i;s+=i+i){var o=s,u=s+i-1,a=u+i;a>n-1&&(a=n-1),this.trigger("trace",{items:e,state:{lo:o,mid:u,hi:a},message:"Merge items[lo..mid..hi]"}),this.merge(e,t,o,u,a)}this.trigger("trace",{items:e,message:"Sorted items[]"})}},_.extend(f.prototype,t,u);var l=e.Quick=function(){};l.prototype={sort:function(e,t){t=t||r;var i=e.length,s=this,o=function(e,r,i){if(r>=i)return;var u=r+1,a=i;s.trigger("trace",{items:e,state:{lo:r,hi:i,gt:u,lt:a},message:"Sort items[lo..hi]. The partitioning item is items[lo]"});for(;;){s.trigger("trace",{items:e,message:"Scan for items[gt] that is greater than the partitioning items[lo]"});while(t(e[u],e[r])<=0&&u<i)u++;s.trigger("trace",{items:e,state:{gt:u},message:"Found items[gt] > items[lo]"}),s.trigger("trace",{items:e,message:"Scan for items[lt] that is less than the partitioning items[lo]"});while(t(e[a],e[r])>=0&&a>r)a--;s.trigger("trace",{items:e,state:{lt:a},message:"Found items[lt] < items[lo]"});if(u>=a){s.trigger("trace",{items:e,message:"if the indicies gt >= lt (i.e. every entry has been partitioned), then stop scanning"});break}n(e,u,a),s.trigger("trace",{items:e,message:"Exchange items[gt] with items[lt]"})}r!==a&&(n(e,r,a),s.trigger("trace",{items:e,message:"Exchange the partitioning items[lo] with items[lt]"})),s.trigger("trace",{items:e,state:{lo:r,hi:i,gt:u,lt:a},message:"Partition items[lo..lt - 1]"}),o(e,r,a-1),s.trigger("trace",{items:e,state:{lo:r,hi:i,gt:u,lt:a},message:"Partition items[gt..hi]"}),o(e,u,i)};o(e,0,i-1),this.trigger("trace",{items:e,state:{lo:0,hi:i-1,gt:undefined,lt:undefined},message:"Sorted items[]"})}},_.extend(l.prototype,t);var c=e.Quick3way=function(){};c.prototype={sort:function(e,t){t=t||r;var i=e.length,s=this,o=function(e,r,i){if(r>=i)return;var u=r,a=r+1,f=i;s.trigger("trace",{items:e,state:{lo:r,hi:i,midP:u,loP:a,hiP:f},message:"Sort items[lo..hi]. The partitioning block is items[midP..loP - 1]"});while(a<=f){s.trigger("trace",{items:e,state:{midP:u,loP:a,hiP:f},message:"Compare items[loP] to items[midP]"});var l=t(e[a],e[u]);l>0?(n(e,a,f),s.trigger("trace",{items:e,message:"If items[loP] is greater than items[midP], then exchange items[loP] with items[hiP]"}),f--,s.trigger("trace",{items:e,state:{hiP:f},message:"Decrement hiP"})):l<0?(n(e,a,u),s.trigger("trace",{items:e,message:"If items[loP] is less than items[midP], then exchange items[loP] with items[midP]"}),a++,u++,s.trigger("trace",{items:e,state:{loP:a,midP:u},message:"Increment loP and midP"})):(a++,s.trigger("trace",{items:e,message:"If items[loP] is equal to items[midP], then increment loP"}))}s.trigger("trace",{items:e,state:{lo:r,hi:i,loP:a,midP:u,hiP:f},message:"Partition items[lo..midP - 1]"}),o(e,r,u-1),s.trigger("trace",{items:e,state:{lo:r,hi:i,loP:a,midP:u,hiP:f},message:"Partition items[loP..hi]"}),o(e,a,i)};o(e,0,i-1),this.trigger("trace",{items:e,state:{lo:0,hi:i-1,midP:undefined,loP:undefined,hiP:undefined},message:"Sorted items[]"})}},_.extend(c.prototype,t);var h={sink:function(e,t,r,i){if(e.length===0)return;this.trigger("trace",{items:e,state:{k:r,n:i},message:"Sink items[k..n-1]"});var s=r;this.trigger("trace",{items:e,state:{i:s},message:"Set i = k"});for(;;){var o=(s+1)*2-1;if(o>=i)break;this.trigger("trace",{items:e,state:{j:o},message:"Scan for items[j] that is greater than items[i]"}),o<i-1&&t(e[o],e[o+1])<0&&(o++,this.trigger("trace",{items:e,state:{j:o},message:"If items[j] is less than items[j + 1], then increment j"})),this.trigger("trace",{items:e,message:"Compare items[i] to items[j]"});if(t(e[s],e[o])>=0){this.trigger("trace",{items:e,message:"If items[j] is greater than items[i], then stop sinking"});break}this.trigger("trace",{items:e,message:"items[i] is less than items[j]"}),n(e,s,o),this.trigger("trace",{items:e,message:"Exchange items[i] with items[j]"}),s=o,this.trigger("trace",{items:e,state:{i:s},message:"Set i = j"})}this.trigger("trace",{items:e,message:"Sinked items[k..n-1]"})},swim:function(e,t,r){if(r===0)return;this.trigger("trace",{items:e,state:{k:r,i:undefined,j:undefined},message:"Swim items[0..k]"});var i=r;this.trigger("trace",{items:e,state:{j:i},message:"Set j = k"});do{var s=Math.floor((i+1)/2)-1;this.trigger("trace",{items:e,state:{i:s},message:"Set the parent index of items[j] to i. Scan for items[i] that is less than items[j]"});if(!(t(e[s],e[i])<0)){this.trigger("trace",{items:e,message:"If items[i] is not less than items[j], then stop swimming"});break}n(e,s,i),this.trigger("trace",{items:e,message:"If items[i] is less than items[j], then exchange items[i] with items[j]"}),i=s,this.trigger("trace",{items:e,state:{j:i},message:"Set j = i"})}while(i>0);this.trigger("trace",{items:e,state:{k:r,i:undefined,j:undefined},message:"Swimmed items[]"})}},p=e.Heap=function(){};p.prototype={sort:function(e,t){t=t||r;var i,s=e.length;this.trigger("trace",{items:e,message:"Prepare a binary heap of items[]. Start sinking from the middle of items[] because the lower half of items[] never have their own children"});for(i=Math.floor(s/2)-1;i>=0;i--)this.sink(e,t,i,s);this.trigger("trace",{items:e,message:"Prepared the binary heap of items[]"});while(s>0)s--,this.trigger("trace",{items:e,state:{n:s,k:undefined,i:undefined,j:undefined},message:"items[0] is the maximum entry"}),n(e,0,s),this.trigger("trace",{items:e,state:{n:s,i:undefined,j:undefined},message:"Exchange items[0] with items[n]"}),this.sink(e,t,0,s);this.trigger("trace",{items:e,state:{n:undefined,k:undefined,i:undefined,j:undefined},message:"Sorted items[]"})}},_.extend(p.prototype,h,t);var d=e.PriorityQueue=function(e){this.heap=[],this.comparator=e||r};d.prototype={enqueue:function(e){this.heap.push(e),this.trigger("trace",{items:this.heap,state:{v:e},message:"Enqueue "+e}),this.swim(this.heap,this.comparator,this.heap.length-1)},dequeue:function(){var e=this.heap.length;if(e===0)return undefined;this.trigger("trace",{items:this.heap,message:"Dequeue the maximum entry"}),n(this.heap,0,e-1),this.trigger("trace",{items:this.heap,message:"Exchange items[0] with items[N - 1]"});var t=this.heap.pop();return this.trigger("trace",{items:this.heap,message:"Pop the maximum entry at the bottom of items[]"}),this.sink(this.heap,this.comparator,0,this.heap.length),t}},_.extend(d.prototype,h,t)}(),function(){var e=algsJS.st={},t=algsJS.Events,n=function(e){if(typeof e=="number")return e;if(typeof e=="object"&&typeof e.hashCode=="function")return e.hashCode();var t=0,n=toString.call(e),r=n.length;for(var i=0;i<r;i++)t=31*t+n.charCodeAt(i)&65535;return t},r=e.HashMap=function(){this.table={}};r.prototype={get:function(e){var t=n(e);if(!this.table[t])return undefined;for(var r in this.table[t])if(_.isEqual(this.table[t][r].key,e))return this.table[t][r].value;return undefined},put:function(e,t){var r=n(e);this.table[r]=this.table[r]||[];var i=!1;for(var s in this.table[r])_.isEqual(this.table[r][s].key,e)&&(i=!0,this.table[r][s]={key:e,value:t});i||this.table[r].push({key:e,value:t})},entrySet:function(){var e=[];for(var t in this.table)for(var n in this.table[t])e.push(_.clone(this.table[t][n]));return e}},_.extend(r.prototype,t)}();